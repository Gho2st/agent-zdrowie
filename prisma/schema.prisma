generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  image         String?
  gender        String?   // np. "M" lub "K"
  height        Int?      // wzrost w cm
  weight        Float?    // waga w kg
  birthdate     DateTime? // wiek jako data urodzenia zeby potem dynamicznie obliczac wiek uzytkownika
  medications String? // leki
  conditions String? // choroby
  systolicMin   Int?
  systolicMax   Int?
  diastolicMin  Int?
  diastolicMax  Int?
  pulseMin      Int?
  pulseMax      Int?
  glucoseFastingMin Int?
  glucoseFastingMax Int?
  glucosePrediabetesFastingMin Int?
  glucosePrediabetesFastingMax Int?
  glucosePostMealMax Int?
  bmi Float?
  weightMin     Float?
  weightMax     Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  measurements  Measurement[]
  dailyCheckins DailyCheckin[]
}


model Measurement {
  id         Int      @id @default(autoincrement())
  amount     Float?
  type       String
  unit       String
  systolic   Int?
  diastolic  Int?
  timing     String?     // np. przed posi≈Çkiem, po posi≈Çku
  context    String?     // np. owsianka
  note       String?     // np. stres
  createdAt  DateTime    @default(now())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
}


model DailyCheckin {
  id        Int      @id @default(autoincrement())
  date      DateTime
  mood      String?  // np. "üôÇ Dobre"
  sleep     String?  // np. "üõå Dobrze spa≈Çem"
  energy    String?  // np. "‚ö°Ô∏è Wysoka"
  stress    String?  // np. "üò£ Wysoki"
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, date]) // jeden check-in dziennie na u≈ºytkownika
}
